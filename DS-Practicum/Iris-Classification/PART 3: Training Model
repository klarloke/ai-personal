# PART 3: Training Model by Splitting data (75/25 is the default)

## Split our dataset into training and testing sets.
x_train, x_test, y_train, y_test = train_test_split(iris['data'], iris['target'], random_state=0)
knn = KNeighborsClassifier(n_neighbors=10)  #no. of neighbours you want to measure your test data against
knn.fit(x_train, y_train)                   #Fitting your model the training data is essentially the training part of the modeling process.


## Imagine that we obtained a new iris 
x_new = np.array([[5, 2.8, 1, 0.25],
                  [19, 7.4, 0.5, 0.9],
                  [8, 2.7, 3.4, 1.6]])
    #print(x_new.shape) 


## Making Predictions

prediction = knn.predict(x_new)        # .predict(): uses model to offer prediction of test data
print(prediction)                      # prints (numerical) outcome
print(iris['target_names'][prediction])

print(knn.score(x_test, y_test))      #overall prediction accuracy score on test set
